/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package HL7tcpsimulator;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author FUR
 */
public class TCPSimulator extends javax.swing.JFrame {

    /**
     * Creates new form TCPSimulator
     */
    
    volatile boolean STARTED = false;
    volatile boolean CONNECTED = false;
    volatile boolean isServer = false;
    String messageFromClient = "";
    String messageToClient;
    ServerSocket server;
    Socket clientSocket;
    String Host = "127.0.0.1";
    String Port = "8000";
    String connectionType = "none";
    Thread ThreadTCPSession;
    BufferedReader inFromClient = null;
    
    public TCPSimulator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPort = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jConnID = new javax.swing.JTextField();
        jCmbType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jIP = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jbtnRefactor = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextToSend = new javax.swing.JTextArea();
        jbtnSend = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jcbSendBlankACKtoACK = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jStart = new javax.swing.JButton();
        jStop = new javax.swing.JButton();
        jbtnClearCommLog = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextMain = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HL7 Tcp Simulator 1.0");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Communication Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));

        jPort.setText("8000");

        jLabel4.setText("Port");

        jLabel2.setText("ID:");

        jLabel1.setText("Type:");

        jConnID.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jConnIDCaretUpdate(evt);
            }
        });

        jCmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Server", "Client" }));

        jLabel3.setText("IP");

        jIP.setText("127.0.0.1");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPort))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jConnID)
                            .add(jCmbType, 0, 104, Short.MAX_VALUE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jIP)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jConnID, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCmbType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jIP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addContainerGap(224, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jbtnRefactor.setText("Refactor");
        jbtnRefactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRefactorActionPerformed(evt);
            }
        });

        jTextToSend.setColumns(20);
        jTextToSend.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        jTextToSend.setRows(5);
        jTextToSend.setBorder(javax.swing.BorderFactory.createTitledBorder("To Send"));
        jScrollPane3.setViewportView(jTextToSend);

        jbtnSend.setText("Send");
        jbtnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSendActionPerformed(evt);
            }
        });

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jcbSendBlankACKtoACK.setText("Send blank ACK to ACK");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jbtnRefactor, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbtnSend, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jcbSendBlankACKtoACK)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jbtnRefactor)
                    .add(jbtnSend)
                    .add(jcbSendBlankACKtoACK)))
        );

        jStart.setText("Start");
        jStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStartActionPerformed(evt);
            }
        });

        jStop.setText("Stop");
        jStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStopActionPerformed(evt);
            }
        });

        jbtnClearCommLog.setText("Clear");
        jbtnClearCommLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnClearCommLogActionPerformed(evt);
            }
        });

        jTextMain.setColumns(20);
        jTextMain.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        jTextMain.setRows(5);
        jTextMain.setBorder(javax.swing.BorderFactory.createTitledBorder("CommLog"));
        jScrollPane1.setViewportView(jTextMain);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jStart, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jStop, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jbtnClearCommLog, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jStart)
                    .add(jStop)
                    .add(jbtnClearCommLog))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(2, 2, 2)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnClearCommLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnClearCommLogActionPerformed
        jTextMain.setText("");
    }//GEN-LAST:event_jbtnClearCommLogActionPerformed

    private void jStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopActionPerformed
        STARTED = false;
        CONNECTED = false;
        AppendToLog(Now() + " : Connection closed by user. \n" + Now() + " : \n");
    }//GEN-LAST:event_jStopActionPerformed

    private void jStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStartActionPerformed
        String connectionType = jCmbType.getSelectedItem().toString().toLowerCase().trim();
        Host = jIP.getText();
        if(connectionType.equals("none")){
            jTextMain.append(Now() + " : Invalid selected type - None. \n");
            return;
        }

        jTextMain.append(Now() + " : Initializing connection. Please wait... \n");
        try {
            Thread.sleep(500);
        } catch (InterruptedException iex) {
            AppendToLog(Now() + " : <error> " + iex.getMessage() + " \n");
        }

        if(connectionType.equals("server")){
            isServer = true;
        }else{
            isServer = false;
        }

        Port = jPort.getText();
        STARTED = true;
        StartService();
    }//GEN-LAST:event_jStartActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextToSend.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jbtnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSendActionPerformed
        if(jTextToSend.getText().trim().length() == 0){
            return;
        }

        if(CONNECTED){
            DataOutputStream outToServer = null;
            String tosend = "";
            String tolog = "";

            String[] lines = jTextToSend.getText().split("\\n");

            for(int i=0; i<lines.length; i++){
                if(lines[i].trim().length()>0){
                    tosend = tosend + lines[i].trim() + (char)13;

                    if(i==0){
                        tolog = "<SB>" + lines[i] + "<CR>";
                    }else{
                        tolog = tolog + lines[i] + "<CR>";
                    }
                }
            }

            try {
                outToServer = new DataOutputStream(clientSocket.getOutputStream());
                outToServer.writeBytes((char)11 + tosend + (char) 28 + (char) 13);

                AppendToLog(Now() + " : <HL7 out> {" + tolog +  "<EB><CR>}\n");
            } catch (IOException ex) {
                JOptionPane.showConfirmDialog(this, "Sending failed.", "Error",
                    JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
            }
        }else{
            JOptionPane.showConfirmDialog(this, "Connection is closed.", "Warning",
                JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_jbtnSendActionPerformed

private void SendHL7(String outgoingMessage){
    if(CONNECTED){
        DataOutputStream outToServer = null;

        try {
            outToServer = new DataOutputStream(clientSocket.getOutputStream());
            outToServer.writeBytes((char)11 + outgoingMessage + (char) 28 + (char) 13);

            AppendToLog(Now() + " : <HL7 out> {<SB>" + outgoingMessage.replace(""+(char)13, "<CR>") +  "<EB><CR>}\n");
        } catch (IOException ex) {
            JOptionPane.showConfirmDialog(this, "Sending failed.", "Error",
                JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
        }
    }else{
        JOptionPane.showConfirmDialog(this, "Connection is closed.", "Warning",
            JOptionPane.CLOSED_OPTION, JOptionPane.WARNING_MESSAGE);
    }

}    
    
    
    private void jbtnRefactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRefactorActionPerformed
        String refactor;
        refactor = jTextToSend.getText().trim();
        refactor = refactor.replaceAll("<CR>", ""+ (char) 10);
        refactor = refactor.replaceAll("<SB>", "");
        refactor = refactor.replaceAll("<EB>", "");
        jTextToSend.setText(refactor);
    }//GEN-LAST:event_jbtnRefactorActionPerformed

    private void jConnIDCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jConnIDCaretUpdate
        this.setTitle("HL7 Tcp Simulator 1.0 - [" + jConnID.getText()+ "]");
        
    }//GEN-LAST:event_jConnIDCaretUpdate

    private void StartService(){
        ThreadTCPSession = new Thread(new Runnable(){
            @Override
            public void run() {
                
                //thread keeps running even when stopped (ThreadPause=true)
                //when ThreadPause=true process diverted to not processing order
                if(isServer){
                    try {
                        server = new ServerSocket (Integer.parseInt(Port));
                        server.setSoTimeout(3000);
                    } catch (IOException ex) {
                        AppendToLog(Now() + " : <error> " + ex.getMessage() + "\n");
                    }
                }

                int retryCount = 0;
                while(STARTED){
                    if(!CONNECTED){
                        retryCount++;
                        try {
                            if(isServer){
                                AppendToLog(Now() + " : <status> (" + retryCount + ") Waiting client connection at port# " + Port + "\n");
                                clientSocket = server.accept();
                                clientSocket.setSoTimeout(100);
                                AppendToLog(Now() + " : \n");
                                AppendToLog(Now() +  " : <status> Accepted" + " " +
                                clientSocket.getInetAddress() + ":" + clientSocket.getPort() + " connection \n");
                                CONNECTED = true;
                            }else{
                                AppendToLog(Now() + " : <status> (" + retryCount + ") Connecting to Host: " + Host + " at port# " + Port + "\n");
                                clientSocket = new Socket();
                                clientSocket.setSoTimeout(100);
                                clientSocket.connect(new InetSocketAddress(Host, Integer.parseInt(Port)));
                                AppendToLog(Now() + " : \n");
                                AppendToLog(Now() + " : <status> Connected to Host: " + Host + " at port# " + Port + "\n");
                                CONNECTED = true;
                            }
                            
                            inFromClient = new BufferedReader(new InputStreamReader (clientSocket.getInputStream()));                        
                            
                        } catch (IOException ex) {
                            CONNECTED = false;
                            AppendToLog(Now() + " : <error> " + ex.getMessage() + " \n");
                            try {
                                Thread.sleep(500);
                            } catch (InterruptedException iex) {
                                AppendToLog(Now() + " : <error> " + iex.getMessage() + " \n");
                            }
                        }
                    }else{
                        retryCount = 0;
                        String inMessage = "";
                        char inChar = (char)0;
                        char lastChar = (char)0;
                        char CR = (char)13;
                        char LF = (char)10;
                        char SB = (char)11;
                        char EB = (char)28;
                        boolean isCompleteLineMessage = false;
                        boolean isCompleteMessage = false; //for future improvement. means hl7 message receive is completed.
                        
                        int i;

                        try {
                            while((i = inFromClient.read()) != -1){
                                inChar = (char) i;

                                if(inChar==SB){
                                    inMessage = "<SB>";
                                }else if(inChar==EB){
                                    inMessage = inMessage + "<EB>";
                                }else if(inChar==LF){
                                    inMessage = inMessage;
                                }else if(inChar==CR){
                                    inMessage = inMessage + "<CR>";
                                    if (lastChar == EB){
                                        isCompleteLineMessage = true;                                        
                                    }
                                    if(lastChar==EB){
                                        isCompleteMessage = true;
                                    }
                                }else{
                                    inMessage = inMessage + inChar;
                                }
                                
                                lastChar = inChar;
                                
                                if(isCompleteMessage){
                                    AppendToLog(Now() + " : <HL7 in> {" + inMessage + "}\n");

                                    String[] segment = inMessage.split("<CR>");
                                    String[] mshField = segment[0].split("\\|");
                                    String[] msgType = mshField[8].split("\\^");
                                        
                                    //send ACK
                                    if (msgType[0].toUpperCase().equals("ACK")){
                                        if(jcbSendBlankACKtoACK.isSelected()){
                                            SendHL7("");
                                        }
                                    }else{    
                                        String ackDate = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());

                                        String ackMessage = "MSH|^~\\&|HCLAB|SLMC-GC|HCS|SLMC-GC|" + ackDate + "||ACK^ACK|HC" + ackDate + "_ACK|P|2.3|||AL|||8859" + CR +
                                                     "MSA|AA|" + mshField[9] + "||||^";
                                        SendHL7(ackMessage);
                                    }
                                    
                                    isCompleteMessage = false;
                                    inMessage = "";
                                }
                            }
                            
                            AppendToLog(Now() + " :  \n");
                            AppendToLog(Now() + " : <status> Session aborted by " + connectionType + ". \n");
                            AppendToLog(Now() + " :  \n");
                            CONNECTED = false;
                        } catch (IOException clientSocketReadError) {
                            //AppendToLog(Now() + " : <error> " + clientSocketReadError.getMessage() + " \n");
                        }
                        
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException threadError) {
                            AppendToLog(Now() + " : <error> " + threadError.getMessage() + " \n");
                        }                    
                    }
                }

                //Service stopped
                //close connection here
                try {
                    clientSocket.close();
                } catch (IOException ex) {
                    Logger.getLogger(TCPSimulator.class.getName()).log(Level.SEVERE, null, ex);
                }
            
                if(isServer){
                    try {
                        server.close();
                    } catch (IOException ex) {
                        Logger.getLogger(TCPSimulator.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            
            }});
        
        ThreadTCPSession.start();
    }

private enum IN_CHAR{
    SB,EB,LF,CR
}    
    

private String Now(){
    Date dt = new Date();
    String dtString = new SimpleDateFormat("yyyyMMdd hh:mm:ss aa").format(dt);
    return dtString;
};


private void AppendToLog(String textToLog){
    final String text = textToLog;
    SwingUtilities.invokeLater(new Runnable(){
    @Override
    public void run(){
        jTextMain.append(text);
        jTextMain.setCaretPosition(jTextMain.getDocument().getLength());

    }});
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TCPSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TCPSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TCPSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TCPSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TCPSimulator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jCmbType;
    private javax.swing.JTextField jConnID;
    private javax.swing.JTextField jIP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jPort;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jStart;
    private javax.swing.JButton jStop;
    private javax.swing.JTextArea jTextMain;
    private javax.swing.JTextArea jTextToSend;
    private javax.swing.JButton jbtnClearCommLog;
    private javax.swing.JButton jbtnRefactor;
    private javax.swing.JButton jbtnSend;
    private javax.swing.JCheckBox jcbSendBlankACKtoACK;
    // End of variables declaration//GEN-END:variables
}
